{"version":3,"sources":["components/Social.js","components/Header.js","App.js","utils/serviceWorker.js","index.js"],"names":["Social","linkedin","instagram","telegram","github","href","isExternal","icon","isRound","ml","defaultProps","Header","name","dp","useColorMode","colorMode","useMediaQuery","isNotSmallerScreen","direction","spacing","p","alignSelf","mt","fontSize","fontWeight","bgGradient","bgClip","mb","borderRadius","backgroundColor","boxShadow","boxSize","src","App","toggleColorMode","isDark","w","color","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAMe,SAASA,EAAT,GAA4D,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,UAAWC,EAAoB,EAApBA,SAAUC,EAAU,EAAVA,OAC9D,OACE,6BACE,kBAAC,IAAD,CAAMC,KAAMJ,EAAUK,YAAU,GAC9B,kBAAC,IAAD,CAAYC,KAAM,kBAAC,IAAD,MAAgBC,QAAQ,UAE5C,kBAAC,IAAD,CAAMH,KAAMF,EAAUG,YAAU,GAC9B,kBAAC,IAAD,CAAYC,KAAM,kBAAC,IAAD,MAAgBE,GAAI,EAAGD,QAAQ,UAEnD,kBAAC,IAAD,CAAMH,KAAMH,EAAWI,YAAU,GAC/B,kBAAC,IAAD,CAAYC,KAAM,kBAAC,IAAD,MAAiBE,GAAI,EAAGD,QAAQ,UAEpD,kBAAC,IAAD,CAAMH,KAAMD,EAAQE,YAAU,GAC5B,kBAAC,IAAD,CAAYC,KAAM,kBAAC,IAAD,MAAcE,GAAI,EAAGD,QAAQ,WAavDR,EAAOU,aAAe,CACpBT,SAAU,wCACVC,UAAW,wCACXC,SAAU,+BACVC,OAAQ,gC,+CC9BK,SAASO,EAAT,GAA+B,IAAbC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GAAM,GACrBC,yBAAdC,UAGqBC,YAAc,sBAApCC,EAJoC,oBAM3C,OACE,kBAAC,IAAD,KASE,kBAAC,IAAD,CACEC,UAAWD,EAAqB,MAAQ,SACxCE,QAAQ,QACRC,EAAGH,EAAqB,KAAO,IAC/BI,UAAU,cAEV,kBAAC,IAAD,CAAKC,GAAIL,EAAqB,IAAM,KAAMI,UAAU,cAClD,kBAAC,IAAD,CAAME,SAAS,MAAMC,WAAW,YAAhC,YAGA,kBAAC,IAAD,CACED,SAAS,MACTC,WAAW,OACXC,WAAW,+CACXC,OAAO,QAENd,IAGL,kBAAC,IAAD,CACES,UAAU,UACVZ,GAAIQ,EAAqB,IAAM,KAC/BU,GAAIV,EAAqB,IAAM,KAC/BW,aAAa,OACbC,gBAAgB,cAChBC,UAAU,KACVC,QAAQ,QACRC,IAAKnB,MAYfF,EAAOD,aAAe,CACpBE,KAAM,cACNC,GAAI,oDCxDN,IAoCeoB,EApCH,WAAO,IAAD,EACuBnB,yBAA/BC,EADQ,EACRA,UAAWmB,EADH,EACGA,gBACbC,EAAuB,SAAdpB,EAEf,OACE,kBAAC,IAAD,CAAQK,EAAG,GACT,kBAAC,IAAD,CAAMgB,EAAE,QACN,kBAAC,IAAD,CAAS3B,GAAG,IAAIe,WAAW,WAAWa,MAAM,YAA5C,eAGA,kBAAC,IAAD,MACA,kBAACrC,EAAD,MACA,kBAAC,IAAD,CACES,GAAI,EACJF,KAAM4B,EAAS,kBAAC,IAAD,MAAY,kBAAC,IAAD,MAC3B3B,QAAQ,OACR8B,QAASJ,KAGb,kBAACvB,EAAD,MACA,kBAACX,EAAD,QCfcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDmFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5e7909c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from '@chakra-ui/react';\nimport { IconButton } from '@chakra-ui/button';\nimport { FaInstagram, FaTelegram, FaGithub, FaLinkedin } from 'react-icons/fa';\n\nexport default function Social({ linkedin, instagram, telegram, github }) {\n  return (\n    <div>\n      <Link href={linkedin} isExternal>\n        <IconButton icon={<FaLinkedin />} isRound=\"true\" />\n      </Link>\n      <Link href={telegram} isExternal>\n        <IconButton icon={<FaTelegram />} ml={2} isRound=\"true\" />\n      </Link>\n      <Link href={instagram} isExternal>\n        <IconButton icon={<FaInstagram />} ml={2} isRound=\"true\" />\n      </Link>\n      <Link href={github} isExternal>\n        <IconButton icon={<FaGithub />} ml={2} isRound=\"true\" />\n      </Link>\n    </div>\n  );\n}\n\nSocial.propTypes = {\n  linkedin: PropTypes.string,\n  instagram: PropTypes.string,\n  telegram: PropTypes.string,\n  github: PropTypes.string,\n};\n\nSocial.defaultProps = {\n  linkedin: 'https://www.linkedin.com/in/jnchirag/',\n  instagram: 'https://www.instagram.com/_chirag_jn/',\n  telegram: 'https://telegram.me/jnchirag',\n  github: 'https://github.com/chirag-jn',\n};\n","import { useColorMode, useMediaQuery, Text } from '@chakra-ui/react';\nimport { Stack, Circle, Flex, Box } from '@chakra-ui/layout';\nimport { Image } from '@chakra-ui/image';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Header({ name, dp }) {\n  const { colorMode } = useColorMode();\n  // eslint-disable-next-line no-unused-vars\n  const isDark = colorMode === 'dark';\n  const [isNotSmallerScreen] = useMediaQuery('(min-width:600px)');\n\n  return (\n    <Stack>\n      {/* <Circle\n        position=\"absolute\"\n        bg=\"blue.100\"\n        opacity=\"0.1\"\n        h=\"300px\"\n        w=\"300px\"\n        alignSelf=\"flex-end\"\n      /> */}\n      <Flex\n        direction={isNotSmallerScreen ? 'row' : 'column'}\n        spacing=\"200px\"\n        p={isNotSmallerScreen ? '32' : '0'}\n        alignSelf=\"flex-start\"\n      >\n        <Box mt={isNotSmallerScreen ? '0' : '16'} alignSelf=\"flex-start\">\n          <Text fontSize=\"5xl\" fontWeight=\"semibold\">\n            Hi, I am\n          </Text>\n          <Text\n            fontSize=\"6xl\"\n            fontWeight=\"bold\"\n            bgGradient=\"linear(to-r, cyan.400, blue.500, purple.600)\"\n            bgClip=\"text\"\n          >\n            {name}\n          </Text>\n        </Box>\n        <Image\n          alignSelf=\"content\"\n          ml={isNotSmallerScreen ? '0' : '12'}\n          mb={isNotSmallerScreen ? '0' : '12'}\n          borderRadius=\"full\"\n          backgroundColor=\"transparent\"\n          boxShadow=\"lg\"\n          boxSize=\"300px\"\n          src={dp}\n        />\n      </Flex>\n    </Stack>\n  );\n}\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  dp: PropTypes.string,\n};\n\nHeader.defaultProps = {\n  name: 'Chirag Jain',\n  dp: 'https://avatars.githubusercontent.com/u/31701616'\n};\n","import React from 'react';\nimport { IconButton } from '@chakra-ui/button';\nimport { FaSun, FaMoon } from 'react-icons/fa';\nimport { Flex, VStack, Heading, useColorMode, Spacer } from '@chakra-ui/react';\nimport Social from './components/Social';\nimport Header from './components/Header';\n\nconst App = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const isDark = colorMode === 'dark';\n\n  return (\n    <VStack p={5}>\n      <Flex w=\"100%\">\n        <Heading ml=\"8\" fontWeight=\"semibold\" color=\"cyan.400\">\n          Chirag Jain\n        </Heading>\n        <Spacer />\n        <Social />\n        <IconButton\n          ml={8}\n          icon={isDark ? <FaSun /> : <FaMoon />}\n          isRound=\"true\"\n          onClick={toggleColorMode}\n        />\n      </Flex>\n      <Header />\n      <Social />\n    </VStack>\n    // <Router>\n    // <div className=\"App\">\n    //     <Title />\n    //     <Route exact path=\"/\" component={Home} />\n    //     <Route path=\"/about\" component={About} />\n    //     <Route path=\"/project/:id\" component={ProjectPage} />\n    //     <Route path=\"/projects\" component={ProjectsList} />\n    //     <Route path=\"/contact\" component={Contact} />\n    //     <Footer />\n    // </div>\n    // </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import { ChakraProvider } from '@chakra-ui/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nimport './utils/custom.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}