{"version":3,"sources":["Title.js","projects/ProjectSpace.js","projects/ProjectsList.js","Footer.js","projects/ProjectPage.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","activeClassName","exact","to","ProjectSpace","props","name","image","address","src","process","width","height","alt","projects","data","map","obj","i","title","desc","id","key","ProjectsList","Footer","ProjectPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAmDeA,MA/Cf,WACE,OACE,6BACE,yBAAKC,UAAU,SACb,kBAAC,IAAD,CACEA,UAAU,WACVC,gBAAgB,kBAChBC,OAAK,EACLC,GAAG,KAEH,6CAGJ,yBAAKH,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,WACVC,gBAAgB,kBAChBC,OAAK,EACLC,GAAG,gBAJL,YASF,yBAAKH,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,WACVC,gBAAgB,kBAChBC,OAAK,EACLC,GAAG,gBAJL,aASF,yBAAKH,UAAU,QACb,kBAAC,IAAD,CACEA,UAAU,WACVC,gBAAgB,kBAChBC,OAAK,EACLC,GAAG,gBAJL,Y,MCnBOC,MAhBf,SAAsBC,GAAQ,IACpBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,QACrB,OACE,yBAAKR,UAAU,gBACb,4BAAKM,GACL,yBACEG,IAAG,UAAKC,GAAL,kBAAqCH,GACxCI,MAAM,MACNC,OAAO,MACPC,IAAI,UAEN,6BAAML,K,eCTNM,EAAWC,EAAKC,KAAI,SAACC,EAAKC,GAAO,IAC7BC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAGf,OACE,kBAAC,EAAD,CACEC,GAAIH,EACJI,IAAKH,EACLb,KAAMa,EACNX,QAASY,EACTb,MAAM,yBASGgB,MAJf,WACE,OAAO,yBAAKvB,UAAU,gBAAgBc,I,MCdzBU,MAJf,WACE,OAAO,+BCYMC,MAbf,SAAqBpB,GAAO,IAElBgB,EAAOhB,EAAMqB,MAAMC,OAAnBN,GAFkB,EAGFN,EAAKM,GAArBF,EAHkB,EAGlBA,MAAOC,EAHW,EAGXA,KAEf,OACE,6BACE,4BAAKD,GACL,4BAAKC,KCUIQ,EAdH,WACV,OACE,kBAAC,IAAD,KACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOE,OAAK,EAAC2B,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,eAAeC,UAAWL,EAAaJ,GAAI,IACvD,kBAAC,IAAD,CAAOQ,KAAK,gBAAgBC,UAAWP,IACvC,kBAAC,EAAD,SCHYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2D,MCVNS,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0F3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fb58f7ec.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Title.css';\n\nfunction Title() {\n  return (\n    <div>\n      <div className=\"Title\">\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          exact\n          to=\"/\"\n        >\n          <h2>Chirag Jain</h2>\n        </NavLink>\n      </div>\n      <div className=\"item\">\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          exact\n          to=\"/projectpage\"\n        >\n          Contact\n        </NavLink>\n      </div>\n      <div className=\"item\">\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          exact\n          to=\"/projectpage\"\n        >\n          Projects\n        </NavLink>\n      </div>\n      <div className=\"item\">\n        <NavLink\n          className=\"nav-link\"\n          activeClassName=\"nav-link-active\"\n          exact\n          to=\"/projectpage\"\n        >\n          About\n        </NavLink>\n      </div>\n    </div>\n  );\n}\n\nexport default Title;\n","import React from 'react';\nimport './ProjectSpace.css';\n\nfunction ProjectSpace(props) {\n  const { name, image, address } = props;\n  return (\n    <div className=\"ProjectSpace\">\n      <h1>{name}</h1>\n      <img\n        src={`${process.env.PUBLIC_URL}images/${image}`}\n        width=\"200\"\n        height=\"200\"\n        alt=\"Hello\"\n      />\n      <div>{address}</div>\n    </div>\n  );\n}\n\nexport default ProjectSpace;\n","import React from 'react';\nimport ProjectSpace from './ProjectSpace';\nimport './ProjectsList.css';\nimport data from './projects-data.json';\n\nconst projects = data.map((obj, i) => {\n  const { title, desc } = obj;\n\n  // TODO: Change default\n  return (\n    <ProjectSpace\n      id={i}\n      key={title}\n      name={title}\n      address={desc}\n      image=\"washkaro-logo.png\"\n    />\n  );\n});\n\nfunction ProjectsList() {\n  return <div className=\"ProjectsList\">{projects}</div>;\n}\n\nexport default ProjectsList;\n","import React from 'react';\nimport './Footer.css';\n\nfunction Footer() {\n  return <div>{/*<p>Chirag</p>*/}</div>;\n}\n\nexport default Footer;\n","import React from 'react';\nimport data from './projects-data.json';\n\nfunction ProjectPage(props) {\n  // eslint-disable-next-line react/destructuring-assignment\n  const { id } = props.match.params;\n  const { title, desc } = data[id];\n\n  return (\n    <div>\n      <h1>{title}</h1>\n      <h2>{desc}</h2>\n    </div>\n  );\n}\n\nexport default ProjectPage;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Title from './Title';\nimport ProjectsList from './projects/ProjectsList';\nimport Footer from './Footer';\nimport ProjectPage from './projects/ProjectPage';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Title />\n        <Route exact path=\"/\" component={ProjectsList} />\n        <Route path=\"/projectpage\" component={ProjectPage} id={0} />\n        <Route path=\"/projects/:id\" component={ProjectsList} />\n        <Footer />\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}